{"version":3,"sources":["components/formHelper/FormText.tsx","components/formHelper/FormSelect.tsx","components/formHelper/FormObject.tsx","components/formHelper/FormUpload.tsx","components/formHelper/FormBuilder.tsx","components/formHelper/FormTextArea.tsx","components/formHelper/schema.tsx","components/formHelper/UseHttp.tsx","components/formHelper/checkForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormText","schema","onChange","idx","className","Input","placeholder","name","defaultValue","value","x","y","Options","item","key","text","this","FormSelect","options","Select","map","option","FormObject","onSchemaChange","_uploadfile","data","a","fetch","method","body","then","response","json","FormUpload","React","pictures","setPictures","fileInputRef","Button","content","labelPosition","icon","onClick","current","click","ref","type","multiple","hidden","e","picture","concat","formData","FormData","append","console","log","catch","error","onDrop","target","files","accept","node","index","components","select","object","upload","textArea","Form","TextArea","xx","yy","FormBuilder","items","Item","Component","alarmDefinition","description","useHttp","useState","isLoading","setIsLoading","setData","setError","url","res","result","err","makeCall","CheckForm","props","header","setHeader","makeTheCall","split","reverse","reduce","merge","JSON","stringify","headers","mode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dacda35e.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Input } from 'semantic-ui-react'\r\n\r\nconst FormText: React.FC<any> = ({schema, onChange, idx}) => {\r\n    return (\r\n        <div className=\"input\">\r\n            <Input \r\n                placeholder={schema.name}\r\n                defaultValue={schema.value}\r\n                onChange={(x,y)=>{onChange(idx,schema.name,y.value)}}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormText;\r\n","import * as React from 'react';\r\nimport { Select } from 'semantic-ui-react'\r\nclass Options {\r\n    key: any;\r\n    value: any;\r\n    text: any;\r\n    constructor(item: any){\r\n        this.key = item;\r\n        this.value= item;\r\n        this.text = item;\r\n    }\r\n}\r\n\r\nconst FormSelect: React.FC<any> = ({schema,idx, onChange}) => {\r\n    const {options} = schema;\r\n    return (\r\n        <div className=\"select\">\r\n            <Select \r\n                placeholder='Select your country' \r\n                options={options.map( (option:any)=> {return new Options(option)})}\r\n                onChange= {(x: any,y: any)=> {onChange(idx,schema.name,y.value);}}  \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormSelect;\r\n","import * as React from 'react';\r\nimport FormBuilder from './FormBuilder';\r\n\r\nconst FormObject: React.FC<any> = ({schema, idx, onSchemaChange}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h2>{schema.name}</h2>\r\n            <FormBuilder \r\n                schema={schema}\r\n                idx={idx}\r\n                onSchemaChange= {onSchemaChange}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default FormObject;\r\n","import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react'\r\n\r\n\r\nexport const _uploadfile = async (data: any) => {\r\n    return await fetch(`http://127.0.0.1:5000/api/uploadFile`, {\r\n        method: 'POST',\r\n        body: data\r\n    })\r\n    .then(response => response.json())\r\n};\r\n   \r\n\r\nconst FormUpload: React.FC<any> = ({idx,schema,onChange }) => {\r\n    const [pictures, setPictures] = React.useState<any>([]);\r\n    const fileInputRef = React.useRef<HTMLInputElement>(null);\r\n    const onDrop = (picture: any) => {\r\n        setPictures(pictures.concat(picture));        \r\n        const formData = new FormData();\r\n        formData.append('imageFile', picture[0]);\r\n        _uploadfile(formData).then(data => {\r\n            console.log(data)\r\n          })\r\n          .catch(error => {\r\n            console.error(error)\r\n          });\r\n    }\r\n\r\n   \r\n    return (\r\n        <div className=\"logo\">\r\n            <Button\r\n                content={schema.name}\r\n                labelPosition=\"left\"\r\n                icon=\"file\"\r\n                onClick={() => fileInputRef.current && fileInputRef.current.click()}\r\n            />\r\n            <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                multiple= {false}\r\n                hidden\r\n                onChange={(e) => onDrop(e.target.files)}\r\n                accept=\"image/png, image/jpeg\"\r\n            />\r\n\r\n            {pictures.map((node:any, index: number)=> {\r\n                return <p key={index}>{node[0].name}</p>\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormUpload;\r\n","import * as React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport FormText from './FormText';\r\nimport FormSelect from './FormSelect';\r\nimport FormObject from './FormObject';\r\nimport FormUpload from './FormUpload';\r\nimport FormTextArea from './FormTextArea';\r\n\r\nconst components: any = {\r\n    text: FormText,\r\n    select: FormSelect,\r\n    object: FormObject,\r\n    upload: FormUpload,\r\n    textArea :FormTextArea\r\n};\r\n\r\nconst nameformat = (name: string) => {\r\n    return name.replace(/[^A-Z0-9]+/ig, \"-\");\r\n}\r\n\r\nconst FormBuilder: React.FC<any> = ({ schema, idx , onSchemaChange }) => {\r\n    \r\n    const onChange = (idx:any,name: any,data: any) => {\r\n        onSchemaChange(idx,name,data);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-builder-container\">\r\n            <h3>{schema.name}</h3>\r\n            {schema.items.map((Item: any, index: number) => {\r\n                const Component = components[Item.type];\r\n                return <Component\r\n                            key={index}\r\n                            schema={Item}\r\n                            idx={idx? `${idx}-${schema.name}` : schema.name}\r\n                            onChange={onChange}\r\n                            onSchemaChange = {onSchemaChange}\r\n                        />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormBuilder;\r\n","import * as React from 'react';\r\nimport { Form, TextArea } from 'semantic-ui-react'\r\n\r\nconst FormTextArea: React.FC<any> = ({schema, onChange, idx}) => {\r\n    return (\r\n        <div className=\"input\">\r\n            <Form>\r\n                <TextArea \r\n                    placeholder={schema.name}\r\n                    onChange={(xx,yy)=>onChange(idx,schema.name,yy.value)} />\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormTextArea;\r\n","export const alarmDefinition: any = {\r\n    name: 'header',\r\n    type: 'object',\r\n    items: [\r\n        {\r\n            type: 'text',\r\n            description: 'heading',\r\n            value: '',\r\n            name: 'heading',\r\n        },\r\n        {\r\n            type: 'textArea',\r\n            description: 'description',\r\n            value: '',\r\n            name: 'description',\r\n        },\r\n        {\r\n            type: 'upload',\r\n            description: 'logo',\r\n            value: '',\r\n            name: 'logo'\r\n        }\r\n    ]\r\n};\r\n","import { useState, useEffect } from \"react\"\r\n\r\nconst useHttp = (): [boolean,any,any, (url: string, body:any) => void] => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null);\r\n\r\n    const makeCall = (url: string, body: any) => {\r\n        fetch(url,{...body}).then((res: any)=> {\r\n            res.json()\r\n        }).then((result: any)=> {\r\n            setIsLoading(false);\r\n            setData(result);\r\n        }).catch((err:any) => {\r\n            setError(err);\r\n        })\r\n    };\r\n\r\n    const makeTheCall = (url: string, body: any) => {\r\n        setIsLoading(true);\r\n        makeCall(url,body);\r\n    }\r\n\r\n    return [isLoading, data, error, makeTheCall];\r\n}\r\n\r\nexport default useHttp;","import React, { useEffect } from 'react';\r\nimport FormBuilder from './FormBuilder';\r\nimport { alarmDefinition } from './schema';\r\nimport merge from 'deepmerge';\r\nimport './app.scss';\r\nimport useHttp from './UseHttp';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst CheckForm: React.FC<any> = (props: any) => {\r\n    const [header, setHeader] = React.useState({});\r\n    const onSchemaChange = (idx: any, name: any, data: any) => {\r\n        console.log(data);\r\n        const idxArray = `${idx}-${name}`.split(\"-\");\r\n        const result = idxArray.reverse().reduce((res, key) => ({ [key]: res }), data);\r\n        setHeader(merge(header, result));\r\n        console.log(merge(header, result));\r\n\r\n    }\r\n    const [isLoading, data, error, makeTheCall] = useHttp();\r\n\r\n\r\n    const setHeaderCall = () => {\r\n        makeTheCall(`http://127.0.0.1:5000/api/setHeader`, {\r\n            body: JSON.stringify(header), headers: {\r\n                'Content-Type': 'application/json'\r\n            }, method: 'POST', mode: 'cors'\r\n        });\r\n        console.log(isLoading, data, error);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FormBuilder\r\n                schema={alarmDefinition}\r\n                onSchemaChange={onSchemaChange}\r\n            />\r\n            <Button onClick={setHeaderCall}>click here</Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckForm;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CheckForm from './components/formHelper/checkForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CheckForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}